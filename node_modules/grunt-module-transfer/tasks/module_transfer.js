/*
* grunt-module-transfer
* https://github.com/75team/novaUI
*
* Copyright (c) 2013 melonHuang
* Licensed under the MIT license.
*/

'use strict';

module.exports = function(grunt) {

    // Please see the Grunt documentation for more information regarding task
    // creation: http://gruntjs.com/creating-tasks

    grunt.registerMultiTask('module_transfer', 'The best Grunt plugin ever.', function() {
        // Merge task-specific and/or target-specific options with these defaults.
        var options = this.options({
            punctuation: '.',
            separator: ', '
        });


        var fs = require('fs');
        var moduleName = this.target;
        var moduleNameUc = firstLetterUc(moduleName);
        var folderName = this.data.module;
        var version = this.data.version;
        var buildPath = options.buildpath + options.root + folderName + '/' + version + '/' + moduleName + '.js';
        //console.log('buildPath',  buildPath);
         

        var beginText = '(function(root, factory) {\n' + 
                            'if(typeof exports === \'object\') {\n' + 
                                'module.exports = factory();\n' + 
                            '} else if(typeof define === \'function\' && define.amd) {\n' + 
                                'define([' + getRequireModulePaths(options.root, this.data.requires) + '], factory);\n' + 
                            '} else {\n' + 
                                'root[\'' + moduleNameUc + '\'] = factory();\n' + 
                            '}\n' + 
                        '})(this, function(' + getRequireModuleNames(this.data.requires) + ') {\n' + 
                            getRequireStatements(this.data.requires) + '\n';


        var endText = '';


        var source = fs.readFileSync(this.data.src, {encoding: 'utf-8'});
        
        // 使用return Module 替换 this.Module = Module;
        var statmentReg = new RegExp('this.' + moduleNameUc + '\\s*=\\s*' + moduleNameUc);
        source = source.replace(statmentReg, 'return ' + moduleNameUc);

        // 将最后的})();替换为});
        source = source.replace(/\(\s*\)\s*;\s*$/, ';');

        // 删除开头的(function() {
        source = source.replace(/\(\s*function\s*\(\s*\)\s*{/, '');


        makeDir('', options.buildpath + options.root + folderName + '/' + version);
        //console.log(beginText + source + endText);
        fs.writeFileSync(buildPath, beginText + source + endText);


        function copyFile(from, to) {
            var source = fs.readFileSync(from, {encoding: 'utf-8'});
        }
        
        // 首字母大写
        function firstLetterUc(str) {
            return str.charAt(0).toUpperCase() + str.substring(1);
        }

        function getRequireModuleNames(requires) {
            var modules = [];
            for(var require in requires) {
                modules.push(require);
            }
            return modules.join(',');
        }

        function getRequireModulePaths(root, requires) {
            var paths = [];
            for(var require in requires) {
                //var path = root + requires[require];
                var path = requires[require];
                paths.push('\'' + path + '\'');
            }
            return paths.join(',');
        }

        function getRequireStatements(requires) {
            var stat = '';
            for(var require in requires) {
                // Carousel = Carousel || this.Carousel;
                stat += require + ' = ' + require + ' || this.' + require + ';\n';
            }
            return stat;
        }

        function makeDir(root, path) {
           var path = path.split('/'); 
           if(path.length > 0 && path[0]) {
               var dirPath = root == '' ? root + path[0] : root + '/' + path[0];
               dirPath = root == '' ? path[0] : root + '/' + path[0];
               if(!fs.existsSync(dirPath))
                   fs.mkdirSync(dirPath);
               makeDir(dirPath, path.slice(1).join('/'));
           } 
           else {
               return;
           }
        }

    });

};
